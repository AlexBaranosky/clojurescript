;;  Copyright (c) Rich Hickey. All rights reserved.
;;  The use and distribution terms for this software are covered by the
;;  Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;  which can be found in the file epl-v10.html at the root of this distribution.
;;  By using this software in any fashion, you are agreeing to be bound by
;;  the terms of this license.
;;  You must not remove this notice, or any other, from this software.

(ns ^{:doc "Receive - Eval - Print - Loop

  Receive a block of JS (presumably generated by a ClojureScript compiler)
  Evaluate it naively
  Print the result of evaluation to a string
  Send the resulting string back to the server Loop!"

      :author "Bobby Calderwood and Alex Redington"}
  clojure.browser.repl
  (:require [clojure.browser.net   :as net]
            [clojure.browser.event :as event]))

(defn log [& args]
  (.log js/console (apply pr-str args)))

(defn log-obj [obj]
  (.log js/console obj))

(def result-id (atom 0))
(def result    (atom nil))

(defn next-result!
  []
  (swap! result-id inc)
  (reset! result nil))

(defn input-uri [base-uri]
  (str base-uri "/javascript/" @result-id))

(defn output-uri [base-uri]
  (str base-uri "/clojurescript/out/" @result-id))

(defn get-block
  "Gets a single block of JavaScript from the server"
  [connection base-uri]
  (log "(get-block " connection " " base-uri ")")
  (net/transmit connection (input-uri base-uri)))

(defn post-result
  "Posts an evaluated block of ClojureScript to the server"
  [connection base-uri]
  (log "(post-result " connection " " base-uri " " @result ")")
  (net/transmit connection (output-uri base-uri) "POST" @result))

(defn process-block
  "Process a single block of JavaScript received from the server"
  [block]
  (log-obj (str "evaluating: " block))
  (js* "eval(~{block})"))

#_(defmacro with-timeout
    [ms & body]
    `(let [f# (fn [] ~@body)]
       (js/setTimeout f# ~ms)))

(defn start-repl
  "Start the REPL loop"
  [base-uri]
  (let [connection (net/open)]
    (event/listen connection
                  :ready
                  (fn [e]
                    (if @result
                      (post-result connection base-uri)
                      (js/setTimeout
                       (fn []
                         (get-block connection base-uri))
                       100))))

    (event/listen-once connection
                       :success
                       (fn [_]
                         (log "one time only")
                         (event/listen connection
                                       :success
                                       (fn [e]
                                         (log @result)
                                         (if @result
                                           (next-result!)
                                           (reset! result
                                                   (process-block
                                                    (.getResponseText e/target ()))))))))



    (js/setTimeout
     (fn []
       (net/transmit connection
                     (str base-uri "/clients")
                     "POST"))
     100)))
